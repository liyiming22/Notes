"use strict";(self.webpackChunkdaily_steps=self.webpackChunkdaily_steps||[]).push([[908],{4787:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-ce023784",path:"/Frontend/JavaScript/",title:"This is JavaScript notes",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"ESM vs CJS",slug:"esm-vs-cjs",children:[{level:3,title:"相互引用",slug:"相互引用",children:[]},{level:3,title:"加载",slug:"加载",children:[]},{level:3,title:"差异",slug:"差异",children:[]},{level:3,title:"ES 模块中实现 require",slug:"es-模块中实现-require",children:[]}]},{level:2,title:"Promise",slug:"promise",children:[]},{level:2,title:"对象",slug:"对象",children:[{level:3,title:"Js 对象的两种属性",slug:"js-对象的两种属性",children:[]},{level:3,title:"Data properties",slug:"data-properties",children:[]},{level:3,title:"Accessor properties",slug:"accessor-properties",children:[]},{level:3,title:"合并对象",slug:"合并对象",children:[]}]},{level:2,title:"Promise.resolve vs new Promise(resolve => resolve())",slug:"promise-resolve-vs-new-promise-resolve-resolve",children:[]}],filePathRelative:"Frontend/JavaScript/README.md",git:{updatedTime:1633490487e3,contributors:[{name:"liyiming",email:"lym.liam@outlook.com",commits:1}]}}},5723:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const p=(0,e.uE)('<h1 id="this-is-javascript-notes" tabindex="-1"><a class="header-anchor" href="#this-is-javascript-notes" aria-hidden="true">#</a> This is JavaScript notes</h1><h2 id="esm-vs-cjs" tabindex="-1"><a class="header-anchor" href="#esm-vs-cjs" aria-hidden="true">#</a> ESM vs CJS</h2><h3 id="相互引用" tabindex="-1"><a class="header-anchor" href="#相互引用" aria-hidden="true">#</a> 相互引用</h3><ol><li><p><code>ESM</code> 模块只能 <code>import</code> 而不能 <code>require</code>。</p></li><li><p><code>ESM</code> 模块可以 <code>import</code> <code>CJS</code> 模块，但是只能通过<em>默认导入</em>的模式，比如<code>import _ from &#39;lodash&#39;</code>，而不能使用声明式的导入方式，比如 <code>import {shuffle} from &#39;lodash&#39;</code>。(That’s because CJS scripts compute their named exports as they execute, whereas ESM’s named exports must be computed during the parsing phase. )</p></li><li><p><code>ESM</code> 模块可以 <code>require</code> <code>CJS</code> 模块，包括声明式导出的，但是依然会有很多问题，类似 Webpack 或者 Rollup 这样的工具甚至不知道该怎么出处理 <code>ESM</code> 里的 <code>require</code> 代码。</p></li><li><p>Node 默认支持的是 <code>CJS</code> 标准，你需要选择 <code>.mjs</code> 这样的后缀或者在 <code>package.json</code> 文件中设置 <code>&quot;type&quot;: &quot;module&quot;</code> 才能开启 <code>ESM</code> 模式。通过这种方式开启的话，如果有 <code>CJS</code> 规范的文件，就需要将后缀改成 <code>.cjs</code>。</p></li></ol><h3 id="加载" tabindex="-1"><a class="header-anchor" href="#加载" aria-hidden="true">#</a> 加载</h3><p><code>CJS</code> 中的 <code>require</code> 是同步的，他不会返回一个 <code>promise</code> 或者是执行一个回调函数。<code>require</code> 从磁盘或者网络中读取文件然后立即执行。</p><p><code>ESM</code> 中的模块 <code>loader</code> 异步加载模块，首先解析 <code>import</code> 和 <code>export</code> 而不是去执行，在解析阶段，模块 <code>loader</code> 可以在声明式的 <code>import</code> 中检测错误并且抛出而不运行任何依赖的代码。</p><p>The ESM module loader then asynchronously downloads and parses any scripts that you imported, and then scripts that your scripts imported, building out a “module graph” of dependencies, until eventually it finds a script that doesn’t import anything. Finally, that script is allowed to execute, and then scripts that depend on that are allowed to run, and so on.</p><p>ES 模块中所有的依赖是并行下载，最后按顺序执行。</p><h3 id="差异" tabindex="-1"><a class="header-anchor" href="#差异" aria-hidden="true">#</a> 差异</h3><p><code>CJS</code> 不能 <code>require</code> <code>ESM</code> 最大的原因是 <code>CJS</code> 不支持 Top-level await。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./foo.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="es-模块中实现-require" tabindex="-1"><a class="header-anchor" href="#es-模块中实现-require" aria-hidden="true">#</a> ES 模块中实现 <code>require</code></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRequire <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">;</span> \n<span class="token keyword">const</span> require <span class="token operator">=</span> <span class="token function">createRequire</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token keyword">const</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./foo.cjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><p><code>Promise.catch</code> 只是 <code>promise.then(undefined, onRejected);</code> 方法的一个别名。也就是说，这个方法用来注册当 <code>promise</code> 对象状态变为 <code>Rejected</code> 时的回调。</p><p>静态方法 <code>Promise.resolve(value)</code> 可以认为是 <code>new Promise()</code> 方法的快捷方式。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>每次调用 <code>then</code> 方法都会返回一个<strong>新</strong> <code>promise</code> 对象。</p><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><h3 id="js-对象的两种属性" tabindex="-1"><a class="header-anchor" href="#js-对象的两种属性" aria-hidden="true">#</a> Js 对象的两种属性</h3><p>数据属性（<em>data properties</em>）和访问器属性（<em>accessor properties</em>）</p><h3 id="data-properties" tabindex="-1"><a class="header-anchor" href="#data-properties" aria-hidden="true">#</a> Data properties</h3><ul><li><p><code>configurable</code>: 默认为 <code>true</code>。当 <code>configurable</code> 为 <code>false</code> 时，表示修饰的属性不可被删除、更改，不能被转化为访问器属性。(注意此操作不可逆，并且内部属性除了 <code>writable</code> 之外再使用 <code>Object.defineProperty</code> 会抛出错误)</p></li><li><p><code>enumerable</code>：默认为 <code>true</code>，在 <code>for-in</code> 循环中 return。</p></li><li><p><code>writable</code>：默认为 <code>true</code>。</p></li><li><p><code>value</code></p></li></ul><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>注意，以上所说的默认为 <code>true</code> 是字面量定义对象属性的时候。如果通过 <code>Object.defineProperty</code> 定义的属性，均为 <code>false</code>。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token number">333</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="accessor-properties" tabindex="-1"><a class="header-anchor" href="#accessor-properties" aria-hidden="true">#</a> Accessor properties</h3><p>对象只有 <code>getter</code> 的属性无法被改写，在非严格模式下会被忽略，严格模式下会抛出错误。</p><p>对象只有 <code>setter</code> 的属性无法被读取，在非严格模式下会返回 <code>undefined</code>，严格模式下会抛出错误。</p><h3 id="合并对象" tabindex="-1"><a class="header-anchor" href="#合并对象" aria-hidden="true">#</a> 合并对象</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> dest <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res <span class="token operator">===</span> dest<span class="token punctuation">)</span>   <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="promise-resolve-vs-new-promise-resolve-resolve" tabindex="-1"><a class="header-anchor" href="#promise-resolve-vs-new-promise-resolve-resolve" aria-hidden="true">#</a> <code>Promise.resolve</code> vs <code>new Promise(resolve =&gt; resolve())</code></h2><blockquote><p>The Promise.resolve() method returns a Promise object that is resolved with a given value. If the value is a promise, that promise is returned; if the value is a thenable (i.e. has a &quot;then&quot; method), the returned promise will &quot;follow&quot; that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value. This function flattens nested layers of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer.</p></blockquote><ol><li>如果传入的值是一个 <code>Promise</code>，那么回调的方式会产生两次额外的 tick，看以下代码:</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resovle</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resovle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tick 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tick 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tick 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tick 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ntick <span class="token number">1</span>\ntick <span class="token number">2</span>\ntick <span class="token number">4</span>\ntick <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tick 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tick 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tick 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tick 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntick <span class="token number">4</span>\ntick <span class="token number">1</span>\ntick <span class="token number">2</span>\ntick <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>如果传入 <code>Promise.resolve()</code> 值为一个 <code>Promise</code>，那么 <code>Promise.resolve(value) === value</code></p><ol start="2"><li>如果传入一个 <code>undefined</code> 值，<code>Promise.resolve</code> 会以同步的方式抛出错误，而回调的形式会返回一个 <code>rejected</code> 的 <code>Promise</code>。</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token parameter">someObject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  someObject<span class="token punctuation">.</span>resolved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>someObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token parameter">someObject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    someObject<span class="token punctuation">.</span>resolved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>someObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',39),t=(0,e.Uk)("参考 "),o={href:"https://stackoverflow.com/questions/26711243/promise-resolve-vs-new-promiseresolve",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("stackoverflow"),l=(0,e.Uk)(" 参考 "),u={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("MDN"),r={},d=(0,a(3744).Z)(r,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",o,[c,(0,e.Wm)(a)]),l,(0,e._)("a",u,[i,(0,e.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);